// Qsys_alt_vip_cl_mixer_0.v

// This file was auto-generated from alt_vip_cl_mixer_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module Qsys_alt_vip_cl_mixer_0 #(
		parameter BITS_PER_SYMBOL              = 8,
		parameter NUMBER_OF_COLOR_PLANES       = 3,
		parameter COLOR_PLANES_ARE_IN_PARALLEL = 1,
		parameter MAX_WIDTH                    = 800,
		parameter MAX_HEIGHT                   = 600,
		parameter PIXELS_IN_PARALLEL           = 1,
		parameter OUTPUT_FORMAT                = "4.4.4",
		parameter COLOR_SPACE                  = "RGB",
		parameter PATTERN                      = "uniform",
		parameter UNIFORM_VALUE_RY             = 16,
		parameter UNIFORM_VALUE_GCB            = 170,
		parameter UNIFORM_VALUE_BCR            = 210,
		parameter RUNTIME_CONTROL              = 1
	) (
		input  wire        main_clock_clk,        // main_clock.clk
		input  wire        main_reset_reset,      // main_reset.reset
		input  wire [23:0] din0_data,             //       din0.data
		input  wire        din0_valid,            //           .valid
		input  wire        din0_startofpacket,    //           .startofpacket
		input  wire        din0_endofpacket,      //           .endofpacket
		output wire        din0_ready,            //           .ready
		input  wire [23:0] din1_data,             //       din1.data
		input  wire        din1_valid,            //           .valid
		input  wire        din1_startofpacket,    //           .startofpacket
		input  wire        din1_endofpacket,      //           .endofpacket
		output wire        din1_ready,            //           .ready
		input  wire [23:0] din2_data,             //       din2.data
		input  wire        din2_valid,            //           .valid
		input  wire        din2_startofpacket,    //           .startofpacket
		input  wire        din2_endofpacket,      //           .endofpacket
		output wire        din2_ready,            //           .ready
		input  wire [23:0] din3_data,             //       din3.data
		input  wire        din3_valid,            //           .valid
		input  wire        din3_startofpacket,    //           .startofpacket
		input  wire        din3_endofpacket,      //           .endofpacket
		output wire        din3_ready,            //           .ready
		output wire [23:0] dout_data,             //       dout.data
		output wire        dout_valid,            //           .valid
		output wire        dout_startofpacket,    //           .startofpacket
		output wire        dout_endofpacket,      //           .endofpacket
		input  wire        dout_ready,            //           .ready
		input  wire [5:0]  control_address,       //    control.address
		input  wire [3:0]  control_byteenable,    //           .byteenable
		input  wire        control_write,         //           .write
		input  wire [31:0] control_writedata,     //           .writedata
		input  wire        control_read,          //           .read
		output wire [31:0] control_readdata,      //           .readdata
		output wire        control_readdatavalid, //           .readdatavalid
		output wire        control_waitrequest    //           .waitrequest
	);

	wire         scheduler_cmd_rtc_valid;          // scheduler:cmd_rtc_valid -> control:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_rtc_data;           // scheduler:cmd_rtc_data -> control:av_st_cmd_data
	wire         scheduler_cmd_rtc_ready;          // control:av_st_cmd_ready -> scheduler:cmd_rtc_ready
	wire         scheduler_cmd_rtc_startofpacket;  // scheduler:cmd_rtc_startofpacket -> control:av_st_cmd_startofpacket
	wire         scheduler_cmd_rtc_endofpacket;    // scheduler:cmd_rtc_endofpacket -> control:av_st_cmd_endofpacket
	wire         control_av_st_resp_valid;         // control:av_st_resp_valid -> scheduler:resp_rtc_valid
	wire  [63:0] control_av_st_resp_data;          // control:av_st_resp_data -> scheduler:resp_rtc_data
	wire         control_av_st_resp_ready;         // scheduler:resp_rtc_ready -> control:av_st_resp_ready
	wire         control_av_st_resp_startofpacket; // control:av_st_resp_startofpacket -> scheduler:resp_rtc_startofpacket
	wire         control_av_st_resp_endofpacket;   // control:av_st_resp_endofpacket -> scheduler:resp_rtc_endofpacket
	wire         scheduler_cmd_vib0_valid;         // scheduler:cmd_vib0_valid -> vib0:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_vib0_data;          // scheduler:cmd_vib0_data -> vib0:av_st_cmd_data
	wire         scheduler_cmd_vib0_ready;         // vib0:av_st_cmd_ready -> scheduler:cmd_vib0_ready
	wire         scheduler_cmd_vib0_startofpacket; // scheduler:cmd_vib0_startofpacket -> vib0:av_st_cmd_startofpacket
	wire         scheduler_cmd_vib0_endofpacket;   // scheduler:cmd_vib0_endofpacket -> vib0:av_st_cmd_endofpacket
	wire         scheduler_cmd_vib1_valid;         // scheduler:cmd_vib1_valid -> vib1:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_vib1_data;          // scheduler:cmd_vib1_data -> vib1:av_st_cmd_data
	wire         scheduler_cmd_vib1_ready;         // vib1:av_st_cmd_ready -> scheduler:cmd_vib1_ready
	wire         scheduler_cmd_vib1_startofpacket; // scheduler:cmd_vib1_startofpacket -> vib1:av_st_cmd_startofpacket
	wire         scheduler_cmd_vib1_endofpacket;   // scheduler:cmd_vib1_endofpacket -> vib1:av_st_cmd_endofpacket
	wire         scheduler_cmd_vib2_valid;         // scheduler:cmd_vib2_valid -> vib2:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_vib2_data;          // scheduler:cmd_vib2_data -> vib2:av_st_cmd_data
	wire         scheduler_cmd_vib2_ready;         // vib2:av_st_cmd_ready -> scheduler:cmd_vib2_ready
	wire         scheduler_cmd_vib2_startofpacket; // scheduler:cmd_vib2_startofpacket -> vib2:av_st_cmd_startofpacket
	wire         scheduler_cmd_vib2_endofpacket;   // scheduler:cmd_vib2_endofpacket -> vib2:av_st_cmd_endofpacket
	wire         scheduler_cmd_vib3_valid;         // scheduler:cmd_vib3_valid -> vib3:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_vib3_data;          // scheduler:cmd_vib3_data -> vib3:av_st_cmd_data
	wire         scheduler_cmd_vib3_ready;         // vib3:av_st_cmd_ready -> scheduler:cmd_vib3_ready
	wire         scheduler_cmd_vib3_startofpacket; // scheduler:cmd_vib3_startofpacket -> vib3:av_st_cmd_startofpacket
	wire         scheduler_cmd_vib3_endofpacket;   // scheduler:cmd_vib3_endofpacket -> vib3:av_st_cmd_endofpacket
	wire         scheduler_cmd_tpg_valid;          // scheduler:cmd_tpg_valid -> tpg:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_tpg_data;           // scheduler:cmd_tpg_data -> tpg:av_st_cmd_data
	wire         scheduler_cmd_tpg_ready;          // tpg:av_st_cmd_ready -> scheduler:cmd_tpg_ready
	wire         scheduler_cmd_tpg_startofpacket;  // scheduler:cmd_tpg_startofpacket -> tpg:av_st_cmd_startofpacket
	wire         scheduler_cmd_tpg_endofpacket;    // scheduler:cmd_tpg_endofpacket -> tpg:av_st_cmd_endofpacket
	wire         scheduler_cmd_mix_valid;          // scheduler:cmd_mix_valid -> mix:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_mix_data;           // scheduler:cmd_mix_data -> mix:av_st_cmd_data
	wire         scheduler_cmd_mix_ready;          // mix:av_st_cmd_ready -> scheduler:cmd_mix_ready
	wire         scheduler_cmd_mix_startofpacket;  // scheduler:cmd_mix_startofpacket -> mix:av_st_cmd_startofpacket
	wire         scheduler_cmd_mix_endofpacket;    // scheduler:cmd_mix_endofpacket -> mix:av_st_cmd_endofpacket
	wire         scheduler_cmd_vob_valid;          // scheduler:cmd_vob_valid -> vob:av_st_cmd_valid
	wire  [63:0] scheduler_cmd_vob_data;           // scheduler:cmd_vob_data -> vob:av_st_cmd_data
	wire         scheduler_cmd_vob_ready;          // vob:av_st_cmd_ready -> scheduler:cmd_vob_ready
	wire         scheduler_cmd_vob_startofpacket;  // scheduler:cmd_vob_startofpacket -> vob:av_st_cmd_startofpacket
	wire         scheduler_cmd_vob_endofpacket;    // scheduler:cmd_vob_endofpacket -> vob:av_st_cmd_endofpacket
	wire         vib0_av_st_resp_valid;            // vib0:av_st_resp_valid -> scheduler:resp_vib0_valid
	wire  [63:0] vib0_av_st_resp_data;             // vib0:av_st_resp_data -> scheduler:resp_vib0_data
	wire         vib0_av_st_resp_ready;            // scheduler:resp_vib0_ready -> vib0:av_st_resp_ready
	wire         vib0_av_st_resp_startofpacket;    // vib0:av_st_resp_startofpacket -> scheduler:resp_vib0_startofpacket
	wire         vib0_av_st_resp_endofpacket;      // vib0:av_st_resp_endofpacket -> scheduler:resp_vib0_endofpacket
	wire         vib1_av_st_resp_valid;            // vib1:av_st_resp_valid -> scheduler:resp_vib1_valid
	wire  [63:0] vib1_av_st_resp_data;             // vib1:av_st_resp_data -> scheduler:resp_vib1_data
	wire         vib1_av_st_resp_ready;            // scheduler:resp_vib1_ready -> vib1:av_st_resp_ready
	wire         vib1_av_st_resp_startofpacket;    // vib1:av_st_resp_startofpacket -> scheduler:resp_vib1_startofpacket
	wire         vib1_av_st_resp_endofpacket;      // vib1:av_st_resp_endofpacket -> scheduler:resp_vib1_endofpacket
	wire         vib2_av_st_resp_valid;            // vib2:av_st_resp_valid -> scheduler:resp_vib2_valid
	wire  [63:0] vib2_av_st_resp_data;             // vib2:av_st_resp_data -> scheduler:resp_vib2_data
	wire         vib2_av_st_resp_ready;            // scheduler:resp_vib2_ready -> vib2:av_st_resp_ready
	wire         vib2_av_st_resp_startofpacket;    // vib2:av_st_resp_startofpacket -> scheduler:resp_vib2_startofpacket
	wire         vib2_av_st_resp_endofpacket;      // vib2:av_st_resp_endofpacket -> scheduler:resp_vib2_endofpacket
	wire         vib3_av_st_resp_valid;            // vib3:av_st_resp_valid -> scheduler:resp_vib3_valid
	wire  [63:0] vib3_av_st_resp_data;             // vib3:av_st_resp_data -> scheduler:resp_vib3_data
	wire         vib3_av_st_resp_ready;            // scheduler:resp_vib3_ready -> vib3:av_st_resp_ready
	wire         vib3_av_st_resp_startofpacket;    // vib3:av_st_resp_startofpacket -> scheduler:resp_vib3_startofpacket
	wire         vib3_av_st_resp_endofpacket;      // vib3:av_st_resp_endofpacket -> scheduler:resp_vib3_endofpacket
	wire         tpg_av_st_dout_valid;             // tpg:av_st_dout_valid -> mix:av_st_background_valid
	wire  [55:0] tpg_av_st_dout_data;              // tpg:av_st_dout_data -> mix:av_st_background_data
	wire         tpg_av_st_dout_ready;             // mix:av_st_background_ready -> tpg:av_st_dout_ready
	wire         tpg_av_st_dout_startofpacket;     // tpg:av_st_dout_startofpacket -> mix:av_st_background_startofpacket
	wire         tpg_av_st_dout_endofpacket;       // tpg:av_st_dout_endofpacket -> mix:av_st_background_endofpacket
	wire         vib0_av_st_dout_valid;            // vib0:av_st_dout_valid -> mix:av_st_din0_valid
	wire  [55:0] vib0_av_st_dout_data;             // vib0:av_st_dout_data -> mix:av_st_din0_data
	wire         vib0_av_st_dout_ready;            // mix:av_st_din0_ready -> vib0:av_st_dout_ready
	wire         vib0_av_st_dout_startofpacket;    // vib0:av_st_dout_startofpacket -> mix:av_st_din0_startofpacket
	wire         vib0_av_st_dout_endofpacket;      // vib0:av_st_dout_endofpacket -> mix:av_st_din0_endofpacket
	wire         vib1_av_st_dout_valid;            // vib1:av_st_dout_valid -> mix:av_st_din1_valid
	wire  [55:0] vib1_av_st_dout_data;             // vib1:av_st_dout_data -> mix:av_st_din1_data
	wire         vib1_av_st_dout_ready;            // mix:av_st_din1_ready -> vib1:av_st_dout_ready
	wire         vib1_av_st_dout_startofpacket;    // vib1:av_st_dout_startofpacket -> mix:av_st_din1_startofpacket
	wire         vib1_av_st_dout_endofpacket;      // vib1:av_st_dout_endofpacket -> mix:av_st_din1_endofpacket
	wire         vib2_av_st_dout_valid;            // vib2:av_st_dout_valid -> mix:av_st_din2_valid
	wire  [55:0] vib2_av_st_dout_data;             // vib2:av_st_dout_data -> mix:av_st_din2_data
	wire         vib2_av_st_dout_ready;            // mix:av_st_din2_ready -> vib2:av_st_dout_ready
	wire         vib2_av_st_dout_startofpacket;    // vib2:av_st_dout_startofpacket -> mix:av_st_din2_startofpacket
	wire         vib2_av_st_dout_endofpacket;      // vib2:av_st_dout_endofpacket -> mix:av_st_din2_endofpacket
	wire         vib3_av_st_dout_valid;            // vib3:av_st_dout_valid -> mix:av_st_din3_valid
	wire  [55:0] vib3_av_st_dout_data;             // vib3:av_st_dout_data -> mix:av_st_din3_data
	wire         vib3_av_st_dout_ready;            // mix:av_st_din3_ready -> vib3:av_st_dout_ready
	wire         vib3_av_st_dout_startofpacket;    // vib3:av_st_dout_startofpacket -> mix:av_st_din3_startofpacket
	wire         vib3_av_st_dout_endofpacket;      // vib3:av_st_dout_endofpacket -> mix:av_st_din3_endofpacket
	wire         mix_av_st_dout_valid;             // mix:av_st_dout_valid -> vob:av_st_din_valid
	wire  [55:0] mix_av_st_dout_data;              // mix:av_st_dout_data -> vob:av_st_din_data
	wire         mix_av_st_dout_ready;             // vob:av_st_din_ready -> mix:av_st_dout_ready
	wire         mix_av_st_dout_startofpacket;     // mix:av_st_dout_startofpacket -> vob:av_st_din_startofpacket
	wire         mix_av_st_dout_endofpacket;       // mix:av_st_dout_endofpacket -> vob:av_st_din_endofpacket

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (BITS_PER_SYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bits_per_symbol_check ( .error(1'b1) );
		end
		if (NUMBER_OF_COLOR_PLANES != 3)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					number_of_color_planes_check ( .error(1'b1) );
		end
		if (COLOR_PLANES_ARE_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					color_planes_are_in_parallel_check ( .error(1'b1) );
		end
		if (MAX_WIDTH != 800)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_width_check ( .error(1'b1) );
		end
		if (MAX_HEIGHT != 600)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_height_check ( .error(1'b1) );
		end
		if (PIXELS_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					pixels_in_parallel_check ( .error(1'b1) );
		end
		if (OUTPUT_FORMAT != "4.4.4")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					output_format_check ( .error(1'b1) );
		end
		if (COLOR_SPACE != "RGB")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					color_space_check ( .error(1'b1) );
		end
		if (PATTERN != "uniform")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					pattern_check ( .error(1'b1) );
		end
		if (UNIFORM_VALUE_RY != 16)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					uniform_value_ry_check ( .error(1'b1) );
		end
		if (UNIFORM_VALUE_GCB != 170)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					uniform_value_gcb_check ( .error(1'b1) );
		end
		if (UNIFORM_VALUE_BCR != 210)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					uniform_value_bcr_check ( .error(1'b1) );
		end
		if (RUNTIME_CONTROL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					runtime_control_check ( .error(1'b1) );
		end
	endgenerate

	alt_vip_video_input_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (800),
		.VIDEO_PROTOCOL_NO            (1),
		.RESP_SRC_ADDRESS             (1),
		.RESP_DST_ADDRESS             (1),
		.DATA_SRC_ADDRESS             (2),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib0 (
		.clock                       (main_clock_clk),                   //    main_clock.clk
		.reset                       (main_reset_reset),                 //    main_reset.reset
		.av_st_cmd_valid             (scheduler_cmd_vib0_valid),         //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd_vib0_startofpacket), //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd_vib0_endofpacket),   //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd_vib0_data),          //              .data
		.av_st_cmd_ready             (scheduler_cmd_vib0_ready),         //              .ready
		.av_st_resp_valid            (vib0_av_st_resp_valid),            //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib0_av_st_resp_startofpacket),    //              .startofpacket
		.av_st_resp_endofpacket      (vib0_av_st_resp_endofpacket),      //              .endofpacket
		.av_st_resp_data             (vib0_av_st_resp_data),             //              .data
		.av_st_resp_ready            (vib0_av_st_resp_ready),            //              .ready
		.av_st_dout_valid            (vib0_av_st_dout_valid),            //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib0_av_st_dout_startofpacket),    //              .startofpacket
		.av_st_dout_endofpacket      (vib0_av_st_dout_endofpacket),      //              .endofpacket
		.av_st_dout_data             (vib0_av_st_dout_data),             //              .data
		.av_st_dout_ready            (vib0_av_st_dout_ready),            //              .ready
		.av_st_vid_din_data          (din0_data),                        // av_st_vid_din.data
		.av_st_vid_din_valid         (din0_valid),                       //              .valid
		.av_st_vid_din_startofpacket (din0_startofpacket),               //              .startofpacket
		.av_st_vid_din_endofpacket   (din0_endofpacket),                 //              .endofpacket
		.av_st_vid_din_ready         (din0_ready)                        //              .ready
	);

	alt_vip_video_input_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (800),
		.VIDEO_PROTOCOL_NO            (1),
		.RESP_SRC_ADDRESS             (1),
		.RESP_DST_ADDRESS             (1),
		.DATA_SRC_ADDRESS             (2),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib1 (
		.clock                       (main_clock_clk),                   //    main_clock.clk
		.reset                       (main_reset_reset),                 //    main_reset.reset
		.av_st_cmd_valid             (scheduler_cmd_vib1_valid),         //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd_vib1_startofpacket), //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd_vib1_endofpacket),   //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd_vib1_data),          //              .data
		.av_st_cmd_ready             (scheduler_cmd_vib1_ready),         //              .ready
		.av_st_resp_valid            (vib1_av_st_resp_valid),            //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib1_av_st_resp_startofpacket),    //              .startofpacket
		.av_st_resp_endofpacket      (vib1_av_st_resp_endofpacket),      //              .endofpacket
		.av_st_resp_data             (vib1_av_st_resp_data),             //              .data
		.av_st_resp_ready            (vib1_av_st_resp_ready),            //              .ready
		.av_st_dout_valid            (vib1_av_st_dout_valid),            //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib1_av_st_dout_startofpacket),    //              .startofpacket
		.av_st_dout_endofpacket      (vib1_av_st_dout_endofpacket),      //              .endofpacket
		.av_st_dout_data             (vib1_av_st_dout_data),             //              .data
		.av_st_dout_ready            (vib1_av_st_dout_ready),            //              .ready
		.av_st_vid_din_data          (din1_data),                        // av_st_vid_din.data
		.av_st_vid_din_valid         (din1_valid),                       //              .valid
		.av_st_vid_din_startofpacket (din1_startofpacket),               //              .startofpacket
		.av_st_vid_din_endofpacket   (din1_endofpacket),                 //              .endofpacket
		.av_st_vid_din_ready         (din1_ready)                        //              .ready
	);

	alt_vip_video_input_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (800),
		.VIDEO_PROTOCOL_NO            (1),
		.RESP_SRC_ADDRESS             (1),
		.RESP_DST_ADDRESS             (1),
		.DATA_SRC_ADDRESS             (2),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib2 (
		.clock                       (main_clock_clk),                   //    main_clock.clk
		.reset                       (main_reset_reset),                 //    main_reset.reset
		.av_st_cmd_valid             (scheduler_cmd_vib2_valid),         //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd_vib2_startofpacket), //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd_vib2_endofpacket),   //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd_vib2_data),          //              .data
		.av_st_cmd_ready             (scheduler_cmd_vib2_ready),         //              .ready
		.av_st_resp_valid            (vib2_av_st_resp_valid),            //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib2_av_st_resp_startofpacket),    //              .startofpacket
		.av_st_resp_endofpacket      (vib2_av_st_resp_endofpacket),      //              .endofpacket
		.av_st_resp_data             (vib2_av_st_resp_data),             //              .data
		.av_st_resp_ready            (vib2_av_st_resp_ready),            //              .ready
		.av_st_dout_valid            (vib2_av_st_dout_valid),            //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib2_av_st_dout_startofpacket),    //              .startofpacket
		.av_st_dout_endofpacket      (vib2_av_st_dout_endofpacket),      //              .endofpacket
		.av_st_dout_data             (vib2_av_st_dout_data),             //              .data
		.av_st_dout_ready            (vib2_av_st_dout_ready),            //              .ready
		.av_st_vid_din_data          (din2_data),                        // av_st_vid_din.data
		.av_st_vid_din_valid         (din2_valid),                       //              .valid
		.av_st_vid_din_startofpacket (din2_startofpacket),               //              .startofpacket
		.av_st_vid_din_endofpacket   (din2_endofpacket),                 //              .endofpacket
		.av_st_vid_din_ready         (din2_ready)                        //              .ready
	);

	alt_vip_video_input_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (800),
		.VIDEO_PROTOCOL_NO            (1),
		.RESP_SRC_ADDRESS             (1),
		.RESP_DST_ADDRESS             (1),
		.DATA_SRC_ADDRESS             (2),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib3 (
		.clock                       (main_clock_clk),                   //    main_clock.clk
		.reset                       (main_reset_reset),                 //    main_reset.reset
		.av_st_cmd_valid             (scheduler_cmd_vib3_valid),         //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd_vib3_startofpacket), //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd_vib3_endofpacket),   //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd_vib3_data),          //              .data
		.av_st_cmd_ready             (scheduler_cmd_vib3_ready),         //              .ready
		.av_st_resp_valid            (vib3_av_st_resp_valid),            //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib3_av_st_resp_startofpacket),    //              .startofpacket
		.av_st_resp_endofpacket      (vib3_av_st_resp_endofpacket),      //              .endofpacket
		.av_st_resp_data             (vib3_av_st_resp_data),             //              .data
		.av_st_resp_ready            (vib3_av_st_resp_ready),            //              .ready
		.av_st_dout_valid            (vib3_av_st_dout_valid),            //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib3_av_st_dout_startofpacket),    //              .startofpacket
		.av_st_dout_endofpacket      (vib3_av_st_dout_endofpacket),      //              .endofpacket
		.av_st_dout_data             (vib3_av_st_dout_data),             //              .data
		.av_st_dout_ready            (vib3_av_st_dout_ready),            //              .ready
		.av_st_vid_din_data          (din3_data),                        // av_st_vid_din.data
		.av_st_vid_din_valid         (din3_valid),                       //              .valid
		.av_st_vid_din_startofpacket (din3_startofpacket),               //              .startofpacket
		.av_st_vid_din_endofpacket   (din3_endofpacket),                 //              .endofpacket
		.av_st_vid_din_ready         (din3_ready)                        //              .ready
	);

	alt_vip_tpg_core #(
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.MAX_WIDTH                    (800),
		.MAX_HEIGHT                   (600),
		.BPS                          (8),
		.PIXELS_IN_PARALLEL           (1),
		.OUTPUT_FORMAT                ("4.4.4"),
		.COLOR_SPACE                  ("RGB"),
		.INTERLACING                  ("prog"),
		.PATTERN                      ("uniform"),
		.UNIFORM_VALUE_RY             (16),
		.UNIFORM_VALUE_GCB            (16),
		.UNIFORM_VALUE_BCR            (16),
		.USE_BACKGROUND_AS_BORDER     (0),
		.COLOR_PLANES_ARE_IN_PARALLEL (1)
	) tpg (
		.clock                    (main_clock_clk),                  // main_clock.clk
		.reset                    (main_reset_reset),                // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_tpg_valid),         //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_tpg_startofpacket), //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_tpg_endofpacket),   //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_tpg_data),          //           .data
		.av_st_cmd_ready          (scheduler_cmd_tpg_ready),         //           .ready
		.av_st_dout_valid         (tpg_av_st_dout_valid),            // av_st_dout.valid
		.av_st_dout_startofpacket (tpg_av_st_dout_startofpacket),    //           .startofpacket
		.av_st_dout_endofpacket   (tpg_av_st_dout_endofpacket),      //           .endofpacket
		.av_st_dout_data          (tpg_av_st_dout_data),             //           .data
		.av_st_dout_ready         (tpg_av_st_dout_ready)             //           .ready
	);

	alt_vip_mix_alg_core #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.IS_422                       (1),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.SOURCE_ADDRESS               (0),
		.MAX_WIDTH                    (800),
		.MAX_HEIGHT                   (600),
		.PIXELS_IN_PARALLEL           (1)
	) mix (
		.clock                          (main_clock_clk),                  //       main_clock.clk
		.reset                          (main_reset_reset),                //       main_reset.reset
		.av_st_cmd_valid                (scheduler_cmd_mix_valid),         //        av_st_cmd.valid
		.av_st_cmd_startofpacket        (scheduler_cmd_mix_startofpacket), //                 .startofpacket
		.av_st_cmd_endofpacket          (scheduler_cmd_mix_endofpacket),   //                 .endofpacket
		.av_st_cmd_data                 (scheduler_cmd_mix_data),          //                 .data
		.av_st_cmd_ready                (scheduler_cmd_mix_ready),         //                 .ready
		.av_st_background_valid         (tpg_av_st_dout_valid),            // av_st_background.valid
		.av_st_background_startofpacket (tpg_av_st_dout_startofpacket),    //                 .startofpacket
		.av_st_background_endofpacket   (tpg_av_st_dout_endofpacket),      //                 .endofpacket
		.av_st_background_data          (tpg_av_st_dout_data),             //                 .data
		.av_st_background_ready         (tpg_av_st_dout_ready),            //                 .ready
		.av_st_din0_valid               (vib0_av_st_dout_valid),           //       av_st_din0.valid
		.av_st_din0_startofpacket       (vib0_av_st_dout_startofpacket),   //                 .startofpacket
		.av_st_din0_endofpacket         (vib0_av_st_dout_endofpacket),     //                 .endofpacket
		.av_st_din0_data                (vib0_av_st_dout_data),            //                 .data
		.av_st_din0_ready               (vib0_av_st_dout_ready),           //                 .ready
		.av_st_din1_valid               (vib1_av_st_dout_valid),           //       av_st_din1.valid
		.av_st_din1_startofpacket       (vib1_av_st_dout_startofpacket),   //                 .startofpacket
		.av_st_din1_endofpacket         (vib1_av_st_dout_endofpacket),     //                 .endofpacket
		.av_st_din1_data                (vib1_av_st_dout_data),            //                 .data
		.av_st_din1_ready               (vib1_av_st_dout_ready),           //                 .ready
		.av_st_din2_valid               (vib2_av_st_dout_valid),           //       av_st_din2.valid
		.av_st_din2_startofpacket       (vib2_av_st_dout_startofpacket),   //                 .startofpacket
		.av_st_din2_endofpacket         (vib2_av_st_dout_endofpacket),     //                 .endofpacket
		.av_st_din2_data                (vib2_av_st_dout_data),            //                 .data
		.av_st_din2_ready               (vib2_av_st_dout_ready),           //                 .ready
		.av_st_din3_valid               (vib3_av_st_dout_valid),           //       av_st_din3.valid
		.av_st_din3_startofpacket       (vib3_av_st_dout_startofpacket),   //                 .startofpacket
		.av_st_din3_endofpacket         (vib3_av_st_dout_endofpacket),     //                 .endofpacket
		.av_st_din3_data                (vib3_av_st_dout_data),            //                 .data
		.av_st_din3_ready               (vib3_av_st_dout_ready),           //                 .ready
		.av_st_dout_valid               (mix_av_st_dout_valid),            //       av_st_dout.valid
		.av_st_dout_startofpacket       (mix_av_st_dout_startofpacket),    //                 .startofpacket
		.av_st_dout_endofpacket         (mix_av_st_dout_endofpacket),      //                 .endofpacket
		.av_st_dout_data                (mix_av_st_dout_data),             //                 .data
		.av_st_dout_ready               (mix_av_st_dout_ready)             //                 .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) vob (
		.clock                        (main_clock_clk),                  //     main_clock.clk
		.reset                        (main_reset_reset),                //     main_reset.reset
		.av_st_cmd_valid              (scheduler_cmd_vob_valid),         //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (scheduler_cmd_vob_startofpacket), //               .startofpacket
		.av_st_cmd_endofpacket        (scheduler_cmd_vob_endofpacket),   //               .endofpacket
		.av_st_cmd_data               (scheduler_cmd_vob_data),          //               .data
		.av_st_cmd_ready              (scheduler_cmd_vob_ready),         //               .ready
		.av_st_din_valid              (mix_av_st_dout_valid),            //      av_st_din.valid
		.av_st_din_startofpacket      (mix_av_st_dout_startofpacket),    //               .startofpacket
		.av_st_din_endofpacket        (mix_av_st_dout_endofpacket),      //               .endofpacket
		.av_st_din_data               (mix_av_st_dout_data),             //               .data
		.av_st_din_ready              (mix_av_st_dout_ready),            //               .ready
		.av_st_vid_dout_data          (dout_data),                       // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_valid),                      //               .valid
		.av_st_vid_dout_startofpacket (dout_startofpacket),              //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_endofpacket),                //               .endofpacket
		.av_st_vid_dout_ready         (dout_ready)                       //               .ready
	);

	alt_vip_mix_scheduler #(
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.FRAME_WIDTH        (800),
		.FRAME_HEIGHT       (600),
		.PIXELS_IN_PARALLEL (1),
		.RUNTIME_CONTROL    (1),
		.UNIFORM_VALUE_RY   (16),
		.UNIFORM_VALUE_GCB  (170),
		.UNIFORM_VALUE_BCR  (210)
	) scheduler (
		.clock                   (main_clock_clk),                   // main_clock.clk
		.reset                   (main_reset_reset),                 // main_reset.reset
		.cmd_tpg_valid           (scheduler_cmd_tpg_valid),          //    cmd_tpg.valid
		.cmd_tpg_startofpacket   (scheduler_cmd_tpg_startofpacket),  //           .startofpacket
		.cmd_tpg_endofpacket     (scheduler_cmd_tpg_endofpacket),    //           .endofpacket
		.cmd_tpg_data            (scheduler_cmd_tpg_data),           //           .data
		.cmd_tpg_ready           (scheduler_cmd_tpg_ready),          //           .ready
		.cmd_vib0_valid          (scheduler_cmd_vib0_valid),         //   cmd_vib0.valid
		.cmd_vib0_startofpacket  (scheduler_cmd_vib0_startofpacket), //           .startofpacket
		.cmd_vib0_endofpacket    (scheduler_cmd_vib0_endofpacket),   //           .endofpacket
		.cmd_vib0_data           (scheduler_cmd_vib0_data),          //           .data
		.cmd_vib0_ready          (scheduler_cmd_vib0_ready),         //           .ready
		.cmd_vib1_valid          (scheduler_cmd_vib1_valid),         //   cmd_vib1.valid
		.cmd_vib1_startofpacket  (scheduler_cmd_vib1_startofpacket), //           .startofpacket
		.cmd_vib1_endofpacket    (scheduler_cmd_vib1_endofpacket),   //           .endofpacket
		.cmd_vib1_data           (scheduler_cmd_vib1_data),          //           .data
		.cmd_vib1_ready          (scheduler_cmd_vib1_ready),         //           .ready
		.cmd_vib2_valid          (scheduler_cmd_vib2_valid),         //   cmd_vib2.valid
		.cmd_vib2_startofpacket  (scheduler_cmd_vib2_startofpacket), //           .startofpacket
		.cmd_vib2_endofpacket    (scheduler_cmd_vib2_endofpacket),   //           .endofpacket
		.cmd_vib2_data           (scheduler_cmd_vib2_data),          //           .data
		.cmd_vib2_ready          (scheduler_cmd_vib2_ready),         //           .ready
		.cmd_vib3_valid          (scheduler_cmd_vib3_valid),         //   cmd_vib3.valid
		.cmd_vib3_startofpacket  (scheduler_cmd_vib3_startofpacket), //           .startofpacket
		.cmd_vib3_endofpacket    (scheduler_cmd_vib3_endofpacket),   //           .endofpacket
		.cmd_vib3_data           (scheduler_cmd_vib3_data),          //           .data
		.cmd_vib3_ready          (scheduler_cmd_vib3_ready),         //           .ready
		.cmd_mix_valid           (scheduler_cmd_mix_valid),          //    cmd_mix.valid
		.cmd_mix_startofpacket   (scheduler_cmd_mix_startofpacket),  //           .startofpacket
		.cmd_mix_endofpacket     (scheduler_cmd_mix_endofpacket),    //           .endofpacket
		.cmd_mix_data            (scheduler_cmd_mix_data),           //           .data
		.cmd_mix_ready           (scheduler_cmd_mix_ready),          //           .ready
		.cmd_vob_valid           (scheduler_cmd_vob_valid),          //    cmd_vob.valid
		.cmd_vob_startofpacket   (scheduler_cmd_vob_startofpacket),  //           .startofpacket
		.cmd_vob_endofpacket     (scheduler_cmd_vob_endofpacket),    //           .endofpacket
		.cmd_vob_data            (scheduler_cmd_vob_data),           //           .data
		.cmd_vob_ready           (scheduler_cmd_vob_ready),          //           .ready
		.resp_vib0_valid         (vib0_av_st_resp_valid),            //  resp_vib0.valid
		.resp_vib0_startofpacket (vib0_av_st_resp_startofpacket),    //           .startofpacket
		.resp_vib0_endofpacket   (vib0_av_st_resp_endofpacket),      //           .endofpacket
		.resp_vib0_data          (vib0_av_st_resp_data),             //           .data
		.resp_vib0_ready         (vib0_av_st_resp_ready),            //           .ready
		.resp_vib1_valid         (vib1_av_st_resp_valid),            //  resp_vib1.valid
		.resp_vib1_startofpacket (vib1_av_st_resp_startofpacket),    //           .startofpacket
		.resp_vib1_endofpacket   (vib1_av_st_resp_endofpacket),      //           .endofpacket
		.resp_vib1_data          (vib1_av_st_resp_data),             //           .data
		.resp_vib1_ready         (vib1_av_st_resp_ready),            //           .ready
		.resp_vib2_valid         (vib2_av_st_resp_valid),            //  resp_vib2.valid
		.resp_vib2_startofpacket (vib2_av_st_resp_startofpacket),    //           .startofpacket
		.resp_vib2_endofpacket   (vib2_av_st_resp_endofpacket),      //           .endofpacket
		.resp_vib2_data          (vib2_av_st_resp_data),             //           .data
		.resp_vib2_ready         (vib2_av_st_resp_ready),            //           .ready
		.resp_vib3_valid         (vib3_av_st_resp_valid),            //  resp_vib3.valid
		.resp_vib3_startofpacket (vib3_av_st_resp_startofpacket),    //           .startofpacket
		.resp_vib3_endofpacket   (vib3_av_st_resp_endofpacket),      //           .endofpacket
		.resp_vib3_data          (vib3_av_st_resp_data),             //           .data
		.resp_vib3_ready         (vib3_av_st_resp_ready),            //           .ready
		.cmd_rtc_valid           (scheduler_cmd_rtc_valid),          //    cmd_rtc.valid
		.cmd_rtc_startofpacket   (scheduler_cmd_rtc_startofpacket),  //           .startofpacket
		.cmd_rtc_endofpacket     (scheduler_cmd_rtc_endofpacket),    //           .endofpacket
		.cmd_rtc_data            (scheduler_cmd_rtc_data),           //           .data
		.cmd_rtc_ready           (scheduler_cmd_rtc_ready),          //           .ready
		.resp_rtc_valid          (control_av_st_resp_valid),         //   resp_rtc.valid
		.resp_rtc_startofpacket  (control_av_st_resp_startofpacket), //           .startofpacket
		.resp_rtc_endofpacket    (control_av_st_resp_endofpacket),   //           .endofpacket
		.resp_rtc_data           (control_av_st_resp_data),          //           .data
		.resp_rtc_ready          (control_av_st_resp_ready)          //           .ready
	);

	alt_vip_control_slave #(
		.NUM_READ_REGISTERS             (0),
		.NUM_TRIGGER_REGISTERS          (22),
		.NUM_BLOCKING_TRIGGER_REGISTERS (0),
		.NUM_RW_REGISTERS               (1),
		.NUM_INTERRUPTS                 (0),
		.MM_CONTROL_REG_BYTES           (1),
		.MM_READ_REG_BYTES              (4),
		.MM_TRIGGER_REG_BYTES           (4),
		.MM_RW_REG_BYTES                (4),
		.MM_ADDR_WIDTH                  (6),
		.DATA_INPUT                     (0),
		.DATA_OUTPUT                    (0),
		.FAST_REGISTER_UPDATES          (0),
		.USE_MEMORY                     (0),
		.PIPELINE_READ                  (0),
		.PIPELINE_RESPONSE              (0),
		.PIPELINE_DATA                  (0),
		.SRC_WIDTH                      (8),
		.DST_WIDTH                      (8),
		.CONTEXT_WIDTH                  (8),
		.TASK_WIDTH                     (8),
		.RESP_SOURCE                    (1),
		.RESP_DEST                      (1),
		.RESP_CONTEXT                   (1),
		.DOUT_SOURCE                    (1)
	) control (
		.clock                       (main_clock_clk),                   //    main_clock.clk
		.reset                       (main_reset_reset),                 //    main_reset.reset
		.av_mm_control_address       (control_address),                  // av_mm_control.address
		.av_mm_control_byteenable    (control_byteenable),               //              .byteenable
		.av_mm_control_write         (control_write),                    //              .write
		.av_mm_control_writedata     (control_writedata),                //              .writedata
		.av_mm_control_read          (control_read),                     //              .read
		.av_mm_control_readdata      (control_readdata),                 //              .readdata
		.av_mm_control_readdatavalid (control_readdatavalid),            //              .readdatavalid
		.av_mm_control_waitrequest   (control_waitrequest),              //              .waitrequest
		.av_st_cmd_valid             (scheduler_cmd_rtc_valid),          //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd_rtc_startofpacket),  //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd_rtc_endofpacket),    //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd_rtc_data),           //              .data
		.av_st_cmd_ready             (scheduler_cmd_rtc_ready),          //              .ready
		.av_st_resp_valid            (control_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (control_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (control_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (control_av_st_resp_data),          //              .data
		.av_st_resp_ready            (control_av_st_resp_ready)          //              .ready
	);

endmodule
