// Qsys_alt_vip_cl_scl_0.v

// This file was auto-generated from alt_vip_cl_scl_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module Qsys_alt_vip_cl_scl_0 #(
		parameter SYMBOLS_IN_SEQ      = 1,
		parameter SYMBOLS_IN_PAR      = 3,
		parameter BITS_PER_SYMBOL     = 8,
		parameter EXTRA_PIPELINING    = 0,
		parameter IS_422              = 0,
		parameter NO_BLANKING         = 0,
		parameter MAX_IN_WIDTH        = 640,
		parameter MAX_IN_HEIGHT       = 480,
		parameter MAX_OUT_WIDTH       = 640,
		parameter MAX_OUT_HEIGHT      = 480,
		parameter RUNTIME_CONTROL     = 0,
		parameter ALWAYS_DOWNSCALE    = 0,
		parameter ALGORITHM_NAME      = "POLYPHASE",
		parameter DEFAULT_EDGE_THRESH = 7,
		parameter DEFAULT_UPPER_BLUR  = 15,
		parameter DEFAULT_LOWER_BLUR  = 0,
		parameter ENABLE_FIR          = 0,
		parameter ARE_IDENTICAL       = 0,
		parameter V_TAPS              = 8,
		parameter V_PHASES            = 16,
		parameter H_TAPS              = 8,
		parameter H_PHASES            = 16,
		parameter V_SIGNED            = 1,
		parameter V_INTEGER_BITS      = 1,
		parameter V_FRACTION_BITS     = 7,
		parameter H_SIGNED            = 1,
		parameter H_INTEGER_BITS      = 1,
		parameter H_FRACTION_BITS     = 7,
		parameter PRESERVE_BITS       = 0,
		parameter LOAD_AT_RUNTIME     = 0,
		parameter V_BANKS             = 1,
		parameter V_SYMMETRIC         = 0,
		parameter V_FUNCTION          = "LANCZOS_2",
		parameter V_COEFF_FILE        = "<enter file name (including full path)>",
		parameter H_BANKS             = 1,
		parameter H_SYMMETRIC         = 0,
		parameter H_FUNCTION          = "LANCZOS_2",
		parameter H_COEFF_FILE        = "<enter file name (including full path)>",
		parameter IS_420              = 0
	) (
		input  wire        main_clock,         // main_clock.clk
		input  wire        main_reset,         // main_reset.reset
		input  wire [23:0] din_data,           //        din.data
		input  wire        din_valid,          //           .valid
		input  wire        din_startofpacket,  //           .startofpacket
		input  wire        din_endofpacket,    //           .endofpacket
		output wire        din_ready,          //           .ready
		output wire [23:0] dout_data,          //       dout.data
		output wire        dout_valid,         //           .valid
		output wire        dout_startofpacket, //           .startofpacket
		output wire        dout_endofpacket,   //           .endofpacket
		input  wire        dout_ready          //           .ready
	);

	wire          video_in_av_st_dout_valid;                    // video_in:av_st_dout_valid -> user_packet_demux:av_st_din_valid
	wire   [55:0] video_in_av_st_dout_data;                     // video_in:av_st_dout_data -> user_packet_demux:av_st_din_data
	wire          video_in_av_st_dout_ready;                    // user_packet_demux:av_st_din_ready -> video_in:av_st_dout_ready
	wire          video_in_av_st_dout_startofpacket;            // video_in:av_st_dout_startofpacket -> user_packet_demux:av_st_din_startofpacket
	wire          video_in_av_st_dout_endofpacket;              // video_in:av_st_dout_endofpacket -> user_packet_demux:av_st_din_endofpacket
	wire          user_packet_demux_av_st_dout_1_valid;         // user_packet_demux:av_st_dout_valid_1 -> user_packet_mux:av_st_din_valid_1
	wire   [55:0] user_packet_demux_av_st_dout_1_data;          // user_packet_demux:av_st_dout_data_1 -> user_packet_mux:av_st_din_data_1
	wire          user_packet_demux_av_st_dout_1_ready;         // user_packet_mux:av_st_din_ready_1 -> user_packet_demux:av_st_dout_ready_1
	wire          user_packet_demux_av_st_dout_1_startofpacket; // user_packet_demux:av_st_dout_startofpacket_1 -> user_packet_mux:av_st_din_startofpacket_1
	wire          user_packet_demux_av_st_dout_1_endofpacket;   // user_packet_demux:av_st_dout_endofpacket_1 -> user_packet_mux:av_st_din_endofpacket_1
	wire          user_packet_demux_av_st_dout_0_valid;         // user_packet_demux:av_st_dout_valid_0 -> line_buffer:av_st_din_valid
	wire   [55:0] user_packet_demux_av_st_dout_0_data;          // user_packet_demux:av_st_dout_data_0 -> line_buffer:av_st_din_data
	wire          user_packet_demux_av_st_dout_0_ready;         // line_buffer:av_st_din_ready -> user_packet_demux:av_st_dout_ready_0
	wire          user_packet_demux_av_st_dout_0_startofpacket; // user_packet_demux:av_st_dout_startofpacket_0 -> line_buffer:av_st_din_startofpacket
	wire          user_packet_demux_av_st_dout_0_endofpacket;   // user_packet_demux:av_st_dout_endofpacket_0 -> line_buffer:av_st_din_endofpacket
	wire          line_buffer_av_st_dout_0_valid;               // line_buffer:av_st_dout_valid_0 -> scaler_core:av_st_din_valid
	wire  [223:0] line_buffer_av_st_dout_0_data;                // line_buffer:av_st_dout_data_0 -> scaler_core:av_st_din_data
	wire          line_buffer_av_st_dout_0_ready;               // scaler_core:av_st_din_ready -> line_buffer:av_st_dout_ready_0
	wire          line_buffer_av_st_dout_0_startofpacket;       // line_buffer:av_st_dout_startofpacket_0 -> scaler_core:av_st_din_startofpacket
	wire          line_buffer_av_st_dout_0_endofpacket;         // line_buffer:av_st_dout_endofpacket_0 -> scaler_core:av_st_din_endofpacket
	wire          user_packet_mux_av_st_dout_valid;             // user_packet_mux:av_st_dout_valid -> video_out:av_st_din_valid
	wire   [55:0] user_packet_mux_av_st_dout_data;              // user_packet_mux:av_st_dout_data -> video_out:av_st_din_data
	wire          user_packet_mux_av_st_dout_ready;             // video_out:av_st_din_ready -> user_packet_mux:av_st_dout_ready
	wire          user_packet_mux_av_st_dout_startofpacket;     // user_packet_mux:av_st_dout_startofpacket -> video_out:av_st_din_startofpacket
	wire          user_packet_mux_av_st_dout_endofpacket;       // user_packet_mux:av_st_dout_endofpacket -> video_out:av_st_din_endofpacket
	wire          scheduler_av_st_cmd_0_valid;                  // scheduler:av_st_cmd_0_valid -> video_in:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_0_data;                   // scheduler:av_st_cmd_0_data -> video_in:av_st_cmd_data
	wire          scheduler_av_st_cmd_0_ready;                  // video_in:av_st_cmd_ready -> scheduler:av_st_cmd_0_ready
	wire          scheduler_av_st_cmd_0_startofpacket;          // scheduler:av_st_cmd_0_startofpacket -> video_in:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_0_endofpacket;            // scheduler:av_st_cmd_0_endofpacket -> video_in:av_st_cmd_endofpacket
	wire          scheduler_av_st_cmd_1_valid;                  // scheduler:av_st_cmd_1_valid -> line_buffer:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_1_data;                   // scheduler:av_st_cmd_1_data -> line_buffer:av_st_cmd_data
	wire          scheduler_av_st_cmd_1_ready;                  // line_buffer:av_st_cmd_ready -> scheduler:av_st_cmd_1_ready
	wire          scheduler_av_st_cmd_1_startofpacket;          // scheduler:av_st_cmd_1_startofpacket -> line_buffer:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_1_endofpacket;            // scheduler:av_st_cmd_1_endofpacket -> line_buffer:av_st_cmd_endofpacket
	wire          scheduler_av_st_cmd_3_valid;                  // scheduler:av_st_cmd_3_valid -> scaler_core:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_3_data;                   // scheduler:av_st_cmd_3_data -> scaler_core:av_st_cmd_data
	wire          scheduler_av_st_cmd_3_ready;                  // scaler_core:av_st_cmd_ready -> scheduler:av_st_cmd_3_ready
	wire          scheduler_av_st_cmd_3_startofpacket;          // scheduler:av_st_cmd_3_startofpacket -> scaler_core:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_3_endofpacket;            // scheduler:av_st_cmd_3_endofpacket -> scaler_core:av_st_cmd_endofpacket
	wire          scheduler_av_st_cmd_2_valid;                  // scheduler:av_st_cmd_2_valid -> kernel_creator:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_2_data;                   // scheduler:av_st_cmd_2_data -> kernel_creator:av_st_cmd_data
	wire          scheduler_av_st_cmd_2_ready;                  // kernel_creator:av_st_cmd_ready -> scheduler:av_st_cmd_2_ready
	wire          scheduler_av_st_cmd_2_startofpacket;          // scheduler:av_st_cmd_2_startofpacket -> kernel_creator:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_2_endofpacket;            // scheduler:av_st_cmd_2_endofpacket -> kernel_creator:av_st_cmd_endofpacket
	wire          video_in_av_st_resp_valid;                    // video_in:av_st_resp_valid -> scheduler:av_st_resp_0_valid
	wire   [63:0] video_in_av_st_resp_data;                     // video_in:av_st_resp_data -> scheduler:av_st_resp_0_data
	wire          video_in_av_st_resp_ready;                    // scheduler:av_st_resp_0_ready -> video_in:av_st_resp_ready
	wire          video_in_av_st_resp_startofpacket;            // video_in:av_st_resp_startofpacket -> scheduler:av_st_resp_0_startofpacket
	wire          video_in_av_st_resp_endofpacket;              // video_in:av_st_resp_endofpacket -> scheduler:av_st_resp_0_endofpacket
	wire          kernel_creator_av_st_resp_valid;              // kernel_creator:av_st_resp_valid -> scheduler:av_st_resp_1_valid
	wire   [63:0] kernel_creator_av_st_resp_data;               // kernel_creator:av_st_resp_data -> scheduler:av_st_resp_1_data
	wire          kernel_creator_av_st_resp_ready;              // scheduler:av_st_resp_1_ready -> kernel_creator:av_st_resp_ready
	wire          kernel_creator_av_st_resp_startofpacket;      // kernel_creator:av_st_resp_startofpacket -> scheduler:av_st_resp_1_startofpacket
	wire          kernel_creator_av_st_resp_endofpacket;        // kernel_creator:av_st_resp_endofpacket -> scheduler:av_st_resp_1_endofpacket
	wire          scaler_core_av_st_dout_valid;                 // scaler_core:av_st_dout_valid -> user_packet_mux:av_st_din_valid_0
	wire   [55:0] scaler_core_av_st_dout_data;                  // scaler_core:av_st_dout_data -> user_packet_mux:av_st_din_data_0
	wire          scaler_core_av_st_dout_ready;                 // user_packet_mux:av_st_din_ready_0 -> scaler_core:av_st_dout_ready
	wire          scaler_core_av_st_dout_startofpacket;         // scaler_core:av_st_dout_startofpacket -> user_packet_mux:av_st_din_startofpacket_0
	wire          scaler_core_av_st_dout_endofpacket;           // scaler_core:av_st_dout_endofpacket -> user_packet_mux:av_st_din_endofpacket_0
	wire          scheduler_av_st_cmd_4_valid;                  // scheduler:av_st_cmd_4_valid -> video_out:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_4_data;                   // scheduler:av_st_cmd_4_data -> video_out:av_st_cmd_data
	wire          scheduler_av_st_cmd_4_ready;                  // video_out:av_st_cmd_ready -> scheduler:av_st_cmd_4_ready
	wire          scheduler_av_st_cmd_4_startofpacket;          // scheduler:av_st_cmd_4_startofpacket -> video_out:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_4_endofpacket;            // scheduler:av_st_cmd_4_endofpacket -> video_out:av_st_cmd_endofpacket
	wire          scheduler_av_st_cmd_7_valid;                  // scheduler:av_st_cmd_7_valid -> user_packet_mux:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_7_data;                   // scheduler:av_st_cmd_7_data -> user_packet_mux:av_st_cmd_data
	wire          scheduler_av_st_cmd_7_ready;                  // user_packet_mux:av_st_cmd_ready -> scheduler:av_st_cmd_7_ready
	wire          scheduler_av_st_cmd_7_startofpacket;          // scheduler:av_st_cmd_7_startofpacket -> user_packet_mux:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_7_endofpacket;            // scheduler:av_st_cmd_7_endofpacket -> user_packet_mux:av_st_cmd_endofpacket
	wire  [111:0] user_packet_demux_av_st_dout_data;            // port fragment
	wire    [1:0] user_packet_demux_av_st_dout_valid;           // port fragment
	wire    [1:0] user_packet_demux_av_st_dout_startofpacket;   // port fragment
	wire    [1:0] user_packet_demux_av_st_dout_endofpacket;     // port fragment
	wire  [223:0] line_buffer_av_st_dout_data;                  // port fragment
	wire    [0:0] line_buffer_av_st_dout_valid;                 // port fragment
	wire    [0:0] line_buffer_av_st_dout_startofpacket;         // port fragment
	wire    [0:0] line_buffer_av_st_dout_endofpacket;           // port fragment
	wire    [1:0] user_packet_mux_av_st_din_ready;              // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (SYMBOLS_IN_SEQ != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					symbols_in_seq_check ( .error(1'b1) );
		end
		if (SYMBOLS_IN_PAR != 3)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					symbols_in_par_check ( .error(1'b1) );
		end
		if (BITS_PER_SYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bits_per_symbol_check ( .error(1'b1) );
		end
		if (EXTRA_PIPELINING != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					extra_pipelining_check ( .error(1'b1) );
		end
		if (IS_422 != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_422_check ( .error(1'b1) );
		end
		if (NO_BLANKING != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					no_blanking_check ( .error(1'b1) );
		end
		if (MAX_IN_WIDTH != 640)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_in_width_check ( .error(1'b1) );
		end
		if (MAX_IN_HEIGHT != 480)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_in_height_check ( .error(1'b1) );
		end
		if (MAX_OUT_WIDTH != 640)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_out_width_check ( .error(1'b1) );
		end
		if (MAX_OUT_HEIGHT != 480)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_out_height_check ( .error(1'b1) );
		end
		if (RUNTIME_CONTROL != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					runtime_control_check ( .error(1'b1) );
		end
		if (ALWAYS_DOWNSCALE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					always_downscale_check ( .error(1'b1) );
		end
		if (ALGORITHM_NAME != "POLYPHASE")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					algorithm_name_check ( .error(1'b1) );
		end
		if (DEFAULT_EDGE_THRESH != 7)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					default_edge_thresh_check ( .error(1'b1) );
		end
		if (DEFAULT_UPPER_BLUR != 15)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					default_upper_blur_check ( .error(1'b1) );
		end
		if (DEFAULT_LOWER_BLUR != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					default_lower_blur_check ( .error(1'b1) );
		end
		if (ENABLE_FIR != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					enable_fir_check ( .error(1'b1) );
		end
		if (ARE_IDENTICAL != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					are_identical_check ( .error(1'b1) );
		end
		if (V_TAPS != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_taps_check ( .error(1'b1) );
		end
		if (V_PHASES != 16)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_phases_check ( .error(1'b1) );
		end
		if (H_TAPS != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_taps_check ( .error(1'b1) );
		end
		if (H_PHASES != 16)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_phases_check ( .error(1'b1) );
		end
		if (V_SIGNED != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_signed_check ( .error(1'b1) );
		end
		if (V_INTEGER_BITS != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_integer_bits_check ( .error(1'b1) );
		end
		if (V_FRACTION_BITS != 7)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_fraction_bits_check ( .error(1'b1) );
		end
		if (H_SIGNED != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_signed_check ( .error(1'b1) );
		end
		if (H_INTEGER_BITS != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_integer_bits_check ( .error(1'b1) );
		end
		if (H_FRACTION_BITS != 7)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_fraction_bits_check ( .error(1'b1) );
		end
		if (PRESERVE_BITS != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					preserve_bits_check ( .error(1'b1) );
		end
		if (LOAD_AT_RUNTIME != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					load_at_runtime_check ( .error(1'b1) );
		end
		if (V_BANKS != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_banks_check ( .error(1'b1) );
		end
		if (V_SYMMETRIC != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_symmetric_check ( .error(1'b1) );
		end
		if (V_FUNCTION != "LANCZOS_2")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_function_check ( .error(1'b1) );
		end
		if (V_COEFF_FILE != "<enter file name (including full path)>")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					v_coeff_file_check ( .error(1'b1) );
		end
		if (H_BANKS != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_banks_check ( .error(1'b1) );
		end
		if (H_SYMMETRIC != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_symmetric_check ( .error(1'b1) );
		end
		if (H_FUNCTION != "LANCZOS_2")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_function_check ( .error(1'b1) );
		end
		if (H_COEFF_FILE != "<enter file name (including full path)>")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					h_coeff_file_check ( .error(1'b1) );
		end
		if (IS_420 != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_420_check ( .error(1'b1) );
		end
	endgenerate

	alt_vip_video_input_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (640),
		.VIDEO_PROTOCOL_NO            (1),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) video_in (
		.clock                       (main_clock),                          //    main_clock.clk
		.reset                       (main_reset),                          //    main_reset.reset
		.av_st_cmd_valid             (scheduler_av_st_cmd_0_valid),         //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_av_st_cmd_0_startofpacket), //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_av_st_cmd_0_endofpacket),   //              .endofpacket
		.av_st_cmd_data              (scheduler_av_st_cmd_0_data),          //              .data
		.av_st_cmd_ready             (scheduler_av_st_cmd_0_ready),         //              .ready
		.av_st_resp_valid            (video_in_av_st_resp_valid),           //    av_st_resp.valid
		.av_st_resp_startofpacket    (video_in_av_st_resp_startofpacket),   //              .startofpacket
		.av_st_resp_endofpacket      (video_in_av_st_resp_endofpacket),     //              .endofpacket
		.av_st_resp_data             (video_in_av_st_resp_data),            //              .data
		.av_st_resp_ready            (video_in_av_st_resp_ready),           //              .ready
		.av_st_dout_valid            (video_in_av_st_dout_valid),           //    av_st_dout.valid
		.av_st_dout_startofpacket    (video_in_av_st_dout_startofpacket),   //              .startofpacket
		.av_st_dout_endofpacket      (video_in_av_st_dout_endofpacket),     //              .endofpacket
		.av_st_dout_data             (video_in_av_st_dout_data),            //              .data
		.av_st_dout_ready            (video_in_av_st_dout_ready),           //              .ready
		.av_st_vid_din_data          (din_data),                            // av_st_vid_din.data
		.av_st_vid_din_valid         (din_valid),                           //              .valid
		.av_st_vid_din_startofpacket (din_startofpacket),                   //              .startofpacket
		.av_st_vid_din_endofpacket   (din_endofpacket),                     //              .endofpacket
		.av_st_vid_din_ready         (din_ready)                            //              .ready
	);

	alt_vip_packet_demux #(
		.DATA_WIDTH         (24),
		.NUM_OUTPUTS        (2),
		.CLIP_ADDRESS_BITS  (0),
		.REGISTER_OUTPUT    (1),
		.PIPELINE_READY     (0),
		.PIXELS_IN_PARALLEL (1),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.USER_WIDTH         (0)
	) user_packet_demux (
		.clock                    (main_clock),                                                                  //   main_clock.clk
		.reset                    (main_reset),                                                                  //   main_reset.reset
		.av_st_dout_valid         (user_packet_demux_av_st_dout_valid),                                          // av_st_dout_0.valid
		.av_st_dout_ready         ({user_packet_demux_av_st_dout_1_ready,user_packet_demux_av_st_dout_0_ready}), // av_st_dout_0.ready
		.av_st_dout_startofpacket (user_packet_demux_av_st_dout_startofpacket),                                  // av_st_dout_0.startofpacket
		.av_st_dout_endofpacket   (user_packet_demux_av_st_dout_endofpacket),                                    // av_st_dout_0.endofpacket
		.av_st_dout_data          (user_packet_demux_av_st_dout_data),                                           // av_st_dout_0.data
		.av_st_din_valid          (video_in_av_st_dout_valid),                                                   //    av_st_din.valid
		.av_st_din_startofpacket  (video_in_av_st_dout_startofpacket),                                           //             .startofpacket
		.av_st_din_endofpacket    (video_in_av_st_dout_endofpacket),                                             //             .endofpacket
		.av_st_din_data           (video_in_av_st_dout_data),                                                    //             .data
		.av_st_din_ready          (video_in_av_st_dout_ready)                                                    //             .ready
	);

	alt_vip_line_buffer #(
		.DATA_WIDTH              (24),
		.SYMBOLS_IN_SEQ          (1),
		.MAX_LINE_LENGTH         (640),
		.OUTPUT_PORTS            (1),
		.MODE                    ("LOCKED"),
		.ENABLE_RECEIVE_ONLY_CMD (0),
		.OUTPUT_MUX_SEL          ("VARIABLE"),
		.FIFO_SIZE               (1),
		.KERNEL_SIZE_0           (8),
		.KERNEL_CENTER_0         (3),
		.KERNEL_SIZE_1           (1),
		.KERNEL_START_1          (0),
		.KERNEL_CENTER_1         (0),
		.KERNEL_SIZE_2           (1),
		.KERNEL_START_2          (0),
		.KERNEL_CENTER_2         (0),
		.KERNEL_SIZE_3           (1),
		.KERNEL_START_3          (0),
		.KERNEL_CENTER_3         (0),
		.KERNEL_SIZE_4           (1),
		.KERNEL_START_4          (0),
		.KERNEL_CENTER_4         (0),
		.KERNEL_SIZE_5           (1),
		.KERNEL_START_5          (0),
		.KERNEL_CENTER_5         (0),
		.KERNEL_SIZE_6           (1),
		.KERNEL_START_6          (0),
		.KERNEL_CENTER_6         (0),
		.KERNEL_SIZE_7           (1),
		.KERNEL_START_7          (0),
		.KERNEL_CENTER_7         (0),
		.KERNEL_SIZE_8           (1),
		.KERNEL_START_8          (0),
		.KERNEL_CENTER_8         (0),
		.KERNEL_SIZE_9           (1),
		.KERNEL_START_9          (0),
		.KERNEL_CENTER_9         (0),
		.KERNEL_SIZE_A           (1),
		.KERNEL_START_A          (0),
		.KERNEL_CENTER_A         (0),
		.KERNEL_SIZE_B           (1),
		.KERNEL_START_B          (0),
		.KERNEL_CENTER_B         (0),
		.KERNEL_SIZE_C           (1),
		.KERNEL_START_C          (0),
		.KERNEL_CENTER_C         (0),
		.KERNEL_SIZE_D           (1),
		.KERNEL_START_D          (0),
		.KERNEL_CENTER_D         (0),
		.KERNEL_SIZE_E           (1),
		.KERNEL_START_E          (0),
		.KERNEL_CENTER_E         (0),
		.KERNEL_SIZE_F           (1),
		.KERNEL_START_F          (0),
		.KERNEL_CENTER_F         (0),
		.SRC_WIDTH               (8),
		.DST_WIDTH               (8),
		.CONTEXT_WIDTH           (8),
		.TASK_WIDTH              (8),
		.SOURCE_ADDRESS          (0),
		.ENABLE_FIFOS            (0),
		.ENABLE_PIPELINE_REG     (0)
	) line_buffer (
		.clock                    (main_clock),                                   //   main_clock.clk
		.reset                    (main_reset),                                   //   main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_1_valid),                  //    av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_1_startofpacket),          //             .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_1_endofpacket),            //             .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_1_data),                   //             .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_1_ready),                  //             .ready
		.av_st_din_valid          (user_packet_demux_av_st_dout_0_valid),         //    av_st_din.valid
		.av_st_din_startofpacket  (user_packet_demux_av_st_dout_0_startofpacket), //             .startofpacket
		.av_st_din_endofpacket    (user_packet_demux_av_st_dout_0_endofpacket),   //             .endofpacket
		.av_st_din_data           (user_packet_demux_av_st_dout_0_data),          //             .data
		.av_st_din_ready          (user_packet_demux_av_st_dout_0_ready),         //             .ready
		.av_st_dout_valid         (line_buffer_av_st_dout_valid),                 // av_st_dout_0.valid
		.av_st_dout_ready         ({line_buffer_av_st_dout_0_ready}),             // av_st_dout_0.ready
		.av_st_dout_startofpacket (line_buffer_av_st_dout_startofpacket),         // av_st_dout_0.startofpacket
		.av_st_dout_endofpacket   (line_buffer_av_st_dout_endofpacket),           // av_st_dout_0.endofpacket
		.av_st_dout_data          (line_buffer_av_st_dout_data)                   // av_st_dout_0.data
	);

	Qsys_alt_vip_cl_scl_0_scaler_core scaler_core (
		.clock                    (main_clock),                             // main_clock.clk
		.reset                    (main_reset),                             // main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_3_valid),            //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_3_startofpacket),    //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_3_endofpacket),      //           .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_3_data),             //           .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_3_ready),            //           .ready
		.av_st_din_valid          (line_buffer_av_st_dout_0_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (line_buffer_av_st_dout_0_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (line_buffer_av_st_dout_0_endofpacket),   //           .endofpacket
		.av_st_din_data           (line_buffer_av_st_dout_0_data),          //           .data
		.av_st_din_ready          (line_buffer_av_st_dout_0_ready),         //           .ready
		.av_st_dout_valid         (scaler_core_av_st_dout_valid),           // av_st_dout.valid
		.av_st_dout_startofpacket (scaler_core_av_st_dout_startofpacket),   //           .startofpacket
		.av_st_dout_endofpacket   (scaler_core_av_st_dout_endofpacket),     //           .endofpacket
		.av_st_dout_data          (scaler_core_av_st_dout_data),            //           .data
		.av_st_dout_ready         (scaler_core_av_st_dout_ready)            //           .ready
	);

	alt_vip_packet_mux #(
		.DATA_WIDTH         (24),
		.NUM_INPUTS         (2),
		.REGISTER_OUTPUT    (0),
		.PIPELINE_READY     (0),
		.NAME               ("undefined"),
		.PIXELS_IN_PARALLEL (1),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.USER_WIDTH         (0)
	) user_packet_mux (
		.clock                    (main_clock),                                                                          //  main_clock.clk
		.reset                    (main_reset),                                                                          //  main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_7_valid),                                                         //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_7_startofpacket),                                                 //            .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_7_endofpacket),                                                   //            .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_7_data),                                                          //            .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_7_ready),                                                         //            .ready
		.av_st_din_valid          ({user_packet_demux_av_st_dout_1_valid,scaler_core_av_st_dout_valid}),                 // av_st_din_0.valid
		.av_st_din_ready          (user_packet_mux_av_st_din_ready),                                                     // av_st_din_0.ready
		.av_st_din_startofpacket  ({user_packet_demux_av_st_dout_1_startofpacket,scaler_core_av_st_dout_startofpacket}), // av_st_din_0.startofpacket
		.av_st_din_endofpacket    ({user_packet_demux_av_st_dout_1_endofpacket,scaler_core_av_st_dout_endofpacket}),     // av_st_din_0.endofpacket
		.av_st_din_data           ({user_packet_demux_av_st_dout_1_data[55:0],scaler_core_av_st_dout_data[55:0]}),       // av_st_din_0.data
		.av_st_dout_valid         (user_packet_mux_av_st_dout_valid),                                                    //  av_st_dout.valid
		.av_st_dout_startofpacket (user_packet_mux_av_st_dout_startofpacket),                                            //            .startofpacket
		.av_st_dout_endofpacket   (user_packet_mux_av_st_dout_endofpacket),                                              //            .endofpacket
		.av_st_dout_data          (user_packet_mux_av_st_dout_data),                                                     //            .data
		.av_st_dout_ready         (user_packet_mux_av_st_dout_ready)                                                     //            .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) video_out (
		.clock                        (main_clock),                               //     main_clock.clk
		.reset                        (main_reset),                               //     main_reset.reset
		.av_st_cmd_valid              (scheduler_av_st_cmd_4_valid),              //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (scheduler_av_st_cmd_4_startofpacket),      //               .startofpacket
		.av_st_cmd_endofpacket        (scheduler_av_st_cmd_4_endofpacket),        //               .endofpacket
		.av_st_cmd_data               (scheduler_av_st_cmd_4_data),               //               .data
		.av_st_cmd_ready              (scheduler_av_st_cmd_4_ready),              //               .ready
		.av_st_din_valid              (user_packet_mux_av_st_dout_valid),         //      av_st_din.valid
		.av_st_din_startofpacket      (user_packet_mux_av_st_dout_startofpacket), //               .startofpacket
		.av_st_din_endofpacket        (user_packet_mux_av_st_dout_endofpacket),   //               .endofpacket
		.av_st_din_data               (user_packet_mux_av_st_dout_data),          //               .data
		.av_st_din_ready              (user_packet_mux_av_st_dout_ready),         //               .ready
		.av_st_vid_dout_data          (dout_data),                                // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_valid),                               //               .valid
		.av_st_vid_dout_startofpacket (dout_startofpacket),                       //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_endofpacket),                         //               .endofpacket
		.av_st_vid_dout_ready         (dout_ready)                                //               .ready
	);

	alt_vip_scaler_scheduler #(
		.ALGORITHM                ("POLYPHASE"),
		.ENABLE_FIR               (0),
		.ENABLE_EDGE_ADAPT_COEFFS (0),
		.DEFAULT_EDGE_THRESH      (7),
		.MAX_IN_WIDTH             (640),
		.MAX_IN_HEIGHT            (480),
		.MAX_OUT_WIDTH            (640),
		.MAX_OUT_HEIGHT           (480),
		.RUNTIME_CONTROL          (0),
		.LOAD_AT_RUNTIME          (0),
		.H_BANKS                  (1),
		.V_BANKS                  (1),
		.H_PHASE_WIDTH            (4),
		.V_PHASE_WIDTH            (4),
		.V_TAPS                   (8),
		.H_TAPS                   (8),
		.NO_BLANKING              (0),
		.ENCODER_PIPELINE_STAGE   (0)
	) scheduler (
		.clock                      (main_clock),                              //   main_clock.clk
		.reset                      (main_reset),                              //   main_reset.reset
		.av_st_cmd_0_valid          (scheduler_av_st_cmd_0_valid),             //  av_st_cmd_0.valid
		.av_st_cmd_0_startofpacket  (scheduler_av_st_cmd_0_startofpacket),     //             .startofpacket
		.av_st_cmd_0_endofpacket    (scheduler_av_st_cmd_0_endofpacket),       //             .endofpacket
		.av_st_cmd_0_data           (scheduler_av_st_cmd_0_data),              //             .data
		.av_st_cmd_0_ready          (scheduler_av_st_cmd_0_ready),             //             .ready
		.av_st_cmd_1_valid          (scheduler_av_st_cmd_1_valid),             //  av_st_cmd_1.valid
		.av_st_cmd_1_startofpacket  (scheduler_av_st_cmd_1_startofpacket),     //             .startofpacket
		.av_st_cmd_1_endofpacket    (scheduler_av_st_cmd_1_endofpacket),       //             .endofpacket
		.av_st_cmd_1_data           (scheduler_av_st_cmd_1_data),              //             .data
		.av_st_cmd_1_ready          (scheduler_av_st_cmd_1_ready),             //             .ready
		.av_st_cmd_2_valid          (scheduler_av_st_cmd_2_valid),             //  av_st_cmd_2.valid
		.av_st_cmd_2_startofpacket  (scheduler_av_st_cmd_2_startofpacket),     //             .startofpacket
		.av_st_cmd_2_endofpacket    (scheduler_av_st_cmd_2_endofpacket),       //             .endofpacket
		.av_st_cmd_2_data           (scheduler_av_st_cmd_2_data),              //             .data
		.av_st_cmd_2_ready          (scheduler_av_st_cmd_2_ready),             //             .ready
		.av_st_cmd_3_valid          (scheduler_av_st_cmd_3_valid),             //  av_st_cmd_3.valid
		.av_st_cmd_3_startofpacket  (scheduler_av_st_cmd_3_startofpacket),     //             .startofpacket
		.av_st_cmd_3_endofpacket    (scheduler_av_st_cmd_3_endofpacket),       //             .endofpacket
		.av_st_cmd_3_data           (scheduler_av_st_cmd_3_data),              //             .data
		.av_st_cmd_3_ready          (scheduler_av_st_cmd_3_ready),             //             .ready
		.av_st_cmd_4_valid          (scheduler_av_st_cmd_4_valid),             //  av_st_cmd_4.valid
		.av_st_cmd_4_startofpacket  (scheduler_av_st_cmd_4_startofpacket),     //             .startofpacket
		.av_st_cmd_4_endofpacket    (scheduler_av_st_cmd_4_endofpacket),       //             .endofpacket
		.av_st_cmd_4_data           (scheduler_av_st_cmd_4_data),              //             .data
		.av_st_cmd_4_ready          (scheduler_av_st_cmd_4_ready),             //             .ready
		.av_st_resp_0_valid         (video_in_av_st_resp_valid),               // av_st_resp_0.valid
		.av_st_resp_0_startofpacket (video_in_av_st_resp_startofpacket),       //             .startofpacket
		.av_st_resp_0_endofpacket   (video_in_av_st_resp_endofpacket),         //             .endofpacket
		.av_st_resp_0_data          (video_in_av_st_resp_data),                //             .data
		.av_st_resp_0_ready         (video_in_av_st_resp_ready),               //             .ready
		.av_st_resp_1_valid         (kernel_creator_av_st_resp_valid),         // av_st_resp_1.valid
		.av_st_resp_1_startofpacket (kernel_creator_av_st_resp_startofpacket), //             .startofpacket
		.av_st_resp_1_endofpacket   (kernel_creator_av_st_resp_endofpacket),   //             .endofpacket
		.av_st_resp_1_data          (kernel_creator_av_st_resp_data),          //             .data
		.av_st_resp_1_ready         (kernel_creator_av_st_resp_ready),         //             .ready
		.av_st_cmd_7_valid          (scheduler_av_st_cmd_7_valid),             //  av_st_cmd_7.valid
		.av_st_cmd_7_startofpacket  (scheduler_av_st_cmd_7_startofpacket),     //             .startofpacket
		.av_st_cmd_7_endofpacket    (scheduler_av_st_cmd_7_endofpacket),       //             .endofpacket
		.av_st_cmd_7_data           (scheduler_av_st_cmd_7_data),              //             .data
		.av_st_cmd_7_ready          (scheduler_av_st_cmd_7_ready)              //             .ready
	);

	alt_vip_scaler_kernel_creator #(
		.ALGORITHM            ("POLYPHASE"),
		.PARTIAL_LINE_SCALING (0),
		.IS_422               (0),
		.FRAC_BITS_H          (4),
		.FRAC_BITS_W          (4),
		.FIXED_SIZE           (0),
		.MAX_IN_WIDTH         (640),
		.MAX_IN_HEIGHT        (480),
		.MAX_OUT_WIDTH        (640),
		.MAX_OUT_HEIGHT       (480),
		.NUMBER_OF_FRAMES     (1),
		.EXTRA_PIPELINE_REG   (0),
		.SRC_WIDTH            (8),
		.DST_WIDTH            (8),
		.CONTEXT_WIDTH        (8),
		.TASK_WIDTH           (8),
		.RESP_SRC_ADDR        (0)
	) kernel_creator (
		.clock                    (main_clock),                              // main_clock.clk
		.reset                    (main_reset),                              // main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_2_valid),             //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_2_startofpacket),     //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_2_endofpacket),       //           .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_2_data),              //           .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_2_ready),             //           .ready
		.av_st_resp_valid         (kernel_creator_av_st_resp_valid),         // av_st_resp.valid
		.av_st_resp_startofpacket (kernel_creator_av_st_resp_startofpacket), //           .startofpacket
		.av_st_resp_endofpacket   (kernel_creator_av_st_resp_endofpacket),   //           .endofpacket
		.av_st_resp_data          (kernel_creator_av_st_resp_data),          //           .data
		.av_st_resp_ready         (kernel_creator_av_st_resp_ready)          //           .ready
	);

	assign user_packet_demux_av_st_dout_1_valid = { user_packet_demux_av_st_dout_valid[1] };

	assign user_packet_demux_av_st_dout_1_data = { user_packet_demux_av_st_dout_data[111:56] };

	assign user_packet_demux_av_st_dout_1_ready = { user_packet_mux_av_st_din_ready[1] };

	assign user_packet_demux_av_st_dout_1_startofpacket = { user_packet_demux_av_st_dout_startofpacket[1] };

	assign user_packet_demux_av_st_dout_1_endofpacket = { user_packet_demux_av_st_dout_endofpacket[1] };

	assign user_packet_demux_av_st_dout_0_valid = { user_packet_demux_av_st_dout_valid[0] };

	assign user_packet_demux_av_st_dout_0_data = { user_packet_demux_av_st_dout_data[55:0] };

	assign user_packet_demux_av_st_dout_0_startofpacket = { user_packet_demux_av_st_dout_startofpacket[0] };

	assign user_packet_demux_av_st_dout_0_endofpacket = { user_packet_demux_av_st_dout_endofpacket[0] };

	assign line_buffer_av_st_dout_0_valid = { line_buffer_av_st_dout_valid[0] };

	assign line_buffer_av_st_dout_0_data = { line_buffer_av_st_dout_data[223:0] };

	assign line_buffer_av_st_dout_0_startofpacket = { line_buffer_av_st_dout_startofpacket[0] };

	assign line_buffer_av_st_dout_0_endofpacket = { line_buffer_av_st_dout_endofpacket[0] };

	assign scaler_core_av_st_dout_ready = { user_packet_mux_av_st_din_ready[0] };

endmodule
