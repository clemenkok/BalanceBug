//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module C5G_D8M(

	//////////// CLOCK //////////
	CLOCK_125_p,
	CLOCK_50_B5B,
	CLOCK_50_B6A,
	CLOCK_50_B7A,
	CLOCK_50_B8A,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	CPU_RESET_n,
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,

	//////////// HDMI-TX //////////
	HDMI_TX_CLK,
	HDMI_TX_D,
	HDMI_TX_DE,
	HDMI_TX_HS,
	HDMI_TX_INT,
	HDMI_TX_VS,

	//////////// ADC SPI //////////
	ADC_CONVST,
	ADC_SCK,
	ADC_SDI,
	ADC_SDO,

	//////////// Audio //////////
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,

	//////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
	I2C_SCL,
	I2C_SDA,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,

	//////////// Uart to USB //////////
	UART_RX,
	UART_TX,

	//////////// SRAM //////////
	SRAM_A,
	SRAM_CE_n,
	SRAM_D,
	SRAM_LB_n,
	SRAM_OE_n,
	SRAM_UB_n,
	SRAM_WE_n,

	//////////// LPDDR2 //////////
	DDR2LP_CA,
	DDR2LP_CK_n,
	DDR2LP_CK_p,
	DDR2LP_CKE,
	DDR2LP_CS_n,
	DDR2LP_DM,
	DDR2LP_DQ,
	DDR2LP_DQS_n,
	DDR2LP_DQS_p,
	DDR2LP_OCT_RZQ,

	//////////// GPIO, GPIO connect to D8M-GPIO //////////
	 		          		CAMERA_I2C_SCL,
	 		          		CAMERA_I2C_SDA,
			          		CAMERA_PWDN_n,
			          		MIPI_CS_n,
	 		          		MIPI_I2C_SCL,
	 		          		MIPI_I2C_SDA,
//			          		MIPI_MCLK,
	 		          		MIPI_PIXEL_CLK,
	 		         		MIPI_PIXEL_D,
	 		          		MIPI_PIXEL_HS,
	 		          		MIPI_PIXEL_VS,
			          		MIPI_REFCLK,
			          		MIPI_RESET_n
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_125_p;
input 		          		CLOCK_50_B5B;
input 		          		CLOCK_50_B6A;
input 		          		CLOCK_50_B7A;
input 		          		CLOCK_50_B8A;

//////////// LED //////////
output		     [7:0]		LEDG;
output		     [9:0]		LEDR;

//////////// KEY //////////
input 		          		CPU_RESET_n;
input 		     [3:0]		KEY;

//////////// SW //////////
input 		     [9:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;

//////////// HDMI-TX //////////
output		          		HDMI_TX_CLK;
output		    [23:0]		HDMI_TX_D;
output		          		HDMI_TX_DE;
output		          		HDMI_TX_HS;
input 		          		HDMI_TX_INT;
output		          		HDMI_TX_VS;

//////////// ADC SPI //////////
output		          		ADC_CONVST;
output		          		ADC_SCK;
output		          		ADC_SDI;
input 		          		ADC_SDO;

//////////// Audio //////////
input 		          		AUD_ADCDAT;
inout 		          		AUD_ADCLRCK;
inout 		          		AUD_BCLK;
output		          		AUD_DACDAT;
inout 		          		AUD_DACLRCK;
output		          		AUD_XCK;

//////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
output		          		I2C_SCL;
inout 		          		I2C_SDA;

//////////// SDCARD //////////
output		          		SD_CLK;
inout 		          		SD_CMD;
inout 		     [3:0]		SD_DAT;

//////////// Uart to USB //////////
input 		          		UART_RX;
output		          		UART_TX;

//////////// SRAM //////////
output		    [17:0]		SRAM_A;
output		          		SRAM_CE_n;
inout 		    [15:0]		SRAM_D;
output		          		SRAM_LB_n;
output		          		SRAM_OE_n;
output		          		SRAM_UB_n;
output		          		SRAM_WE_n;

//////////// LPDDR2 //////////
output		     [9:0]		DDR2LP_CA;
output		          		DDR2LP_CK_n;
output		          		DDR2LP_CK_p;
output		     [0:0]		DDR2LP_CKE;
output		     [0:0]		DDR2LP_CS_n;
output		     [3:0]		DDR2LP_DM;
inout 		    [31:0]		DDR2LP_DQ;
inout 		     [3:0]		DDR2LP_DQS_n;
inout 		     [3:0]		DDR2LP_DQS_p;
input 		          		DDR2LP_OCT_RZQ;

	//////////// GPIO, GPIO connect toD8M-GPIO //////////
	inout 		          		CAMERA_I2C_SCL;
	inout 		          		CAMERA_I2C_SDA;
	output		          		CAMERA_PWDN_n;
	output		          		MIPI_CS_n;
	inout 		          		MIPI_I2C_SCL;
	inout 		          		MIPI_I2C_SDA;
//	output		          		MIPI_MCLK;
	input 		          		MIPI_PIXEL_CLK;
	input 		     [9:0]		MIPI_PIXEL_D;
	input 		          		MIPI_PIXEL_HS;
	input 		          		MIPI_PIXEL_VS;
	output		          		MIPI_REFCLK;
	output		          		MIPI_RESET_n;

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire reset_n;


wire DLY_RST_1;
wire DLY_RST_3;


wire [23:0]	disp_data;
wire			disp_clk;
wire			disp_hs;
wire			disp_vs;
wire			disp_de;

wire lpddr2_local_init_done;
wire lpddr2_local_cal_success;
wire lpddr2_local_cal_fail;

//=======================================================
//  Structural coding
//=======================================================
assign MIPI_CS_n = 0;


assign reset_n = CPU_RESET_n;


    D8M_QSYS u0 (
        .external_clk50_clk                        (CLOCK_50_B7A),                        //                 external_clk50.clk
        .external_reset_reset_n                    (reset_n),                    //                 external_reset.reset_n
        
		  .key_external_connection_export            (KEY),
		  
		  .terasic_camera_0_conduit_end_D            ({MIPI_PIXEL_D[9:0],2'b00}),            //   terasic_camera_0_conduit_end.D
        .terasic_camera_0_conduit_end_FVAL         (MIPI_PIXEL_VS),         //                               .FVAL
        .terasic_camera_0_conduit_end_LVAL         (MIPI_PIXEL_HS),         //                               .LVAL
        .terasic_camera_0_conduit_end_PIXCLK       (~MIPI_PIXEL_CLK),       //                               .PIXCLK
		
  		  .i2c_opencores_camera_export_scl_pad_io       (CAMERA_I2C_SCL),       //      i2c_opencores_camera_export.scl_pad_io
        .i2c_opencores_camera_export_sda_pad_io       (CAMERA_I2C_SDA),       //                                 .sda_pad_io
        .i2c_opencores_mipi_export_scl_pad_io         (MIPI_I2C_SCL),         //        i2c_opencores_mipi_export.scl_pad_io
        .i2c_opencores_mipi_export_sda_pad_io         (MIPI_I2C_SDA),         //                                 .sda_pad_io
        
		  .terasic_auto_focus_0_conduit_vcm_i2c_scl    (CAMERA_I2C_SCL),    //      terasic_auto_focus_0_conduit.vcm_i2c_scl
        .terasic_auto_focus_0_conduit_vcm_i2c_sda    (CAMERA_I2C_SDA),    //                                  .vcm_i2c_sda
        .terasic_auto_focus_0_conduit_clk50          (CLOCK_50_B7A),           //                                  .clk50

        .mipi_pwdn_n_external_connection_export       (CAMERA_PWDN_n),       //  mipi_pwdn_n_external_connection.export
        .mipi_reset_n_external_connection_export      (MIPI_RESET_n),      // mipi_reset_n_external_connection.export

	
		  // display output
        .alt_vip_itc_0_clocked_video_vid_clk       (disp_clk),       //    alt_vip_itc_0_clocked_video.vid_clk
        .alt_vip_itc_0_clocked_video_vid_data      (disp_data),      //                               .vid_data
        .alt_vip_itc_0_clocked_video_underflow     (),     //                               .underflow
        .alt_vip_itc_0_clocked_video_vid_datavalid (disp_de), //                               .vid_datavalid
        .alt_vip_itc_0_clocked_video_vid_v_sync    (disp_vs),    //                               .vid_v_sync
        .alt_vip_itc_0_clocked_video_vid_h_sync    (disp_hs),    //                               .vid_h_sync
        .alt_vip_itc_0_clocked_video_vid_f         (),         //                               .vid_f
        .alt_vip_itc_0_clocked_video_vid_h         (),         //                               .vid_h
        .alt_vip_itc_0_clocked_video_vid_v         (),         //                               .vid_v
		  
			// lpddr2
        .memory_mem_ca                             (DDR2LP_CA),                             //                         memory.mem_ca
        .memory_mem_ck                             (DDR2LP_CK_p),                             //                               .mem_ck
        .memory_mem_ck_n                           (DDR2LP_CK_n),                           //                               .mem_ck_n
        .memory_mem_cke                            (DDR2LP_CKE),                            //                               .mem_cke
        .memory_mem_cs_n                           (DDR2LP_CS_n),                           //                               .mem_cs_n
        .memory_mem_dm                             (DDR2LP_DM),                             //                               .mem_dm
        .memory_mem_dq                             (DDR2LP_DQ),                             //                               .mem_dq
        .memory_mem_dqs                            (DDR2LP_DQS_p),                            //                               .mem_dqs
        .memory_mem_dqs_n                          (DDR2LP_DQS_n),                          //                               .mem_dqs_n
        .oct_rzqin                                 (DDR2LP_OCT_RZQ),                                 //                            oct.rzqin
        .mem_if_lpddr2_emif_pll_ref_clk_clk        (CLOCK_125_p),        // mem_if_lpddr2_emif_pll_ref_clk.clk
		  
  
        .mem_if_lpddr2_emif_status_local_init_done   (lpddr2_local_init_done),   //      mem_if_lpddr2_emif_status.local_init_done
        .mem_if_lpddr2_emif_status_local_cal_success (lpddr2_local_cal_success), //                               .local_cal_success
        .mem_if_lpddr2_emif_status_local_cal_fail    (lpddr2_local_cal_fail),     //                               .local_cal_fail
  
		  
		  // hdmi i2c
        .i2c_scl_external_connection_export        (I2C_SCL),        //    i2c_scl_external_connection.export
        .i2c_sda_external_connection_export        (I2C_SDA),         //    i2c_sda_external_connection.export

		  // hdmi interrupt
        .hdmi_tx_int_n_external_connection_export  (~HDMI_TX_INT)   // hdmi_tx_int_n_external_connection.export
    );


	 
	 
/////////////////////////////
// LPDDR2 status
assign LEDG[0] = lpddr2_local_init_done;  // led is high active
assign LEDG[1] = lpddr2_local_cal_fail;
assign LEDG[2] = lpddr2_local_cal_success;
	 
/////////////////////////////
// HDMI TX
assign HDMI_TX_CLK	= disp_clk;
assign HDMI_TX_D		= disp_data;
assign HDMI_TX_DE		= disp_de;
assign HDMI_TX_HS		= disp_hs;
assign HDMI_TX_VS		= disp_vs;


pll0 pll0_sys(
		.refclk(CLOCK_50_B5B),   
		.rst(~reset_n),      
		.outclk_0(MIPI_REFCLK), 
		.locked()    
	);

pll1 pll1_sys(
		.refclk(CLOCK_50_B6A),   
		.rst(~reset_n),      
		.outclk_0(disp_clk), 
		.locked()    
	);
	
 FpsMonitor uFps(
	/*input					*/      .clk50(CLOCK_50_B5B),
	/*input     			*/      .vs(MIPI_PIXEL_VS),
	
	/*output reg [7:0]		*/    .fps(),
	/*output reg [6:0]		*/    .hex_fps_h(HEX1),
	/*output reg [6:0]		*/    .hex_fps_l(HEX0)
);

endmodule
